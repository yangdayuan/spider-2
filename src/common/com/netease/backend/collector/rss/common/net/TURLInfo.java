/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.netease.backend.collector.rss.common.net;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TURLInfo implements org.apache.thrift.TBase<TURLInfo, TURLInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TURLInfo");

  private static final org.apache.thrift.protocol.TField UURL_FIELD_DESC = new org.apache.thrift.protocol.TField("uurl", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PATH_FROM_SEED_FIELD_DESC = new org.apache.thrift.protocol.TField("pathFromSeed", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField VIA_FIELD_DESC = new org.apache.thrift.protocol.TField("via", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MODIFY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("modifyTime", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField DOWN_LOAD_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("downLoadTime", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField REUSE_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("reuseInterval", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField SEED_FIELD_DESC = new org.apache.thrift.protocol.TField("seed", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField ATTACH_FIELD_DESC = new org.apache.thrift.protocol.TField("attach", org.apache.thrift.protocol.TType.STRING, (short)8);

  public String uurl; // required
  public String pathFromSeed; // required
  public String via; // required
  public long modifyTime; // required
  public long downLoadTime; // required
  public long reuseInterval; // required
  public boolean seed; // required
  public ByteBuffer attach; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UURL((short)1, "uurl"),
    PATH_FROM_SEED((short)2, "pathFromSeed"),
    VIA((short)3, "via"),
    MODIFY_TIME((short)4, "modifyTime"),
    DOWN_LOAD_TIME((short)5, "downLoadTime"),
    REUSE_INTERVAL((short)6, "reuseInterval"),
    SEED((short)7, "seed"),
    ATTACH((short)8, "attach");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UURL
          return UURL;
        case 2: // PATH_FROM_SEED
          return PATH_FROM_SEED;
        case 3: // VIA
          return VIA;
        case 4: // MODIFY_TIME
          return MODIFY_TIME;
        case 5: // DOWN_LOAD_TIME
          return DOWN_LOAD_TIME;
        case 6: // REUSE_INTERVAL
          return REUSE_INTERVAL;
        case 7: // SEED
          return SEED;
        case 8: // ATTACH
          return ATTACH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MODIFYTIME_ISSET_ID = 0;
  private static final int __DOWNLOADTIME_ISSET_ID = 1;
  private static final int __REUSEINTERVAL_ISSET_ID = 2;
  private static final int __SEED_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UURL, new org.apache.thrift.meta_data.FieldMetaData("uurl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PATH_FROM_SEED, new org.apache.thrift.meta_data.FieldMetaData("pathFromSeed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VIA, new org.apache.thrift.meta_data.FieldMetaData("via", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODIFY_TIME, new org.apache.thrift.meta_data.FieldMetaData("modifyTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOWN_LOAD_TIME, new org.apache.thrift.meta_data.FieldMetaData("downLoadTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REUSE_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("reuseInterval", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SEED, new org.apache.thrift.meta_data.FieldMetaData("seed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ATTACH, new org.apache.thrift.meta_data.FieldMetaData("attach", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TURLInfo.class, metaDataMap);
  }

  public TURLInfo() {
    this.uurl = "";

    this.pathFromSeed = "";

    this.via = "";

    this.modifyTime = 0L;

    this.downLoadTime = 0L;

    this.reuseInterval = 0L;

  }

  public TURLInfo(
    String uurl,
    String pathFromSeed,
    String via,
    long modifyTime,
    long downLoadTime,
    long reuseInterval,
    boolean seed,
    ByteBuffer attach)
  {
    this();
    this.uurl = uurl;
    this.pathFromSeed = pathFromSeed;
    this.via = via;
    this.modifyTime = modifyTime;
    setModifyTimeIsSet(true);
    this.downLoadTime = downLoadTime;
    setDownLoadTimeIsSet(true);
    this.reuseInterval = reuseInterval;
    setReuseIntervalIsSet(true);
    this.seed = seed;
    setSeedIsSet(true);
    this.attach = attach;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TURLInfo(TURLInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetUurl()) {
      this.uurl = other.uurl;
    }
    if (other.isSetPathFromSeed()) {
      this.pathFromSeed = other.pathFromSeed;
    }
    if (other.isSetVia()) {
      this.via = other.via;
    }
    this.modifyTime = other.modifyTime;
    this.downLoadTime = other.downLoadTime;
    this.reuseInterval = other.reuseInterval;
    this.seed = other.seed;
    if (other.isSetAttach()) {
      this.attach = org.apache.thrift.TBaseHelper.copyBinary(other.attach);
;
    }
  }

  public TURLInfo deepCopy() {
    return new TURLInfo(this);
  }

  @Override
  public void clear() {
    this.uurl = "";

    this.pathFromSeed = "";

    this.via = "";

    this.modifyTime = 0L;

    this.downLoadTime = 0L;

    this.reuseInterval = 0L;

    setSeedIsSet(false);
    this.seed = false;
    this.attach = null;
  }

  public String getUurl() {
    return this.uurl;
  }

  public TURLInfo setUurl(String uurl) {
    this.uurl = uurl;
    return this;
  }

  public void unsetUurl() {
    this.uurl = null;
  }

  /** Returns true if field uurl is set (has been assigned a value) and false otherwise */
  public boolean isSetUurl() {
    return this.uurl != null;
  }

  public void setUurlIsSet(boolean value) {
    if (!value) {
      this.uurl = null;
    }
  }

  public String getPathFromSeed() {
    return this.pathFromSeed;
  }

  public TURLInfo setPathFromSeed(String pathFromSeed) {
    this.pathFromSeed = pathFromSeed;
    return this;
  }

  public void unsetPathFromSeed() {
    this.pathFromSeed = null;
  }

  /** Returns true if field pathFromSeed is set (has been assigned a value) and false otherwise */
  public boolean isSetPathFromSeed() {
    return this.pathFromSeed != null;
  }

  public void setPathFromSeedIsSet(boolean value) {
    if (!value) {
      this.pathFromSeed = null;
    }
  }

  public String getVia() {
    return this.via;
  }

  public TURLInfo setVia(String via) {
    this.via = via;
    return this;
  }

  public void unsetVia() {
    this.via = null;
  }

  /** Returns true if field via is set (has been assigned a value) and false otherwise */
  public boolean isSetVia() {
    return this.via != null;
  }

  public void setViaIsSet(boolean value) {
    if (!value) {
      this.via = null;
    }
  }

  public long getModifyTime() {
    return this.modifyTime;
  }

  public TURLInfo setModifyTime(long modifyTime) {
    this.modifyTime = modifyTime;
    setModifyTimeIsSet(true);
    return this;
  }

  public void unsetModifyTime() {
    __isset_bit_vector.clear(__MODIFYTIME_ISSET_ID);
  }

  /** Returns true if field modifyTime is set (has been assigned a value) and false otherwise */
  public boolean isSetModifyTime() {
    return __isset_bit_vector.get(__MODIFYTIME_ISSET_ID);
  }

  public void setModifyTimeIsSet(boolean value) {
    __isset_bit_vector.set(__MODIFYTIME_ISSET_ID, value);
  }

  public long getDownLoadTime() {
    return this.downLoadTime;
  }

  public TURLInfo setDownLoadTime(long downLoadTime) {
    this.downLoadTime = downLoadTime;
    setDownLoadTimeIsSet(true);
    return this;
  }

  public void unsetDownLoadTime() {
    __isset_bit_vector.clear(__DOWNLOADTIME_ISSET_ID);
  }

  /** Returns true if field downLoadTime is set (has been assigned a value) and false otherwise */
  public boolean isSetDownLoadTime() {
    return __isset_bit_vector.get(__DOWNLOADTIME_ISSET_ID);
  }

  public void setDownLoadTimeIsSet(boolean value) {
    __isset_bit_vector.set(__DOWNLOADTIME_ISSET_ID, value);
  }

  public long getReuseInterval() {
    return this.reuseInterval;
  }

  public TURLInfo setReuseInterval(long reuseInterval) {
    this.reuseInterval = reuseInterval;
    setReuseIntervalIsSet(true);
    return this;
  }

  public void unsetReuseInterval() {
    __isset_bit_vector.clear(__REUSEINTERVAL_ISSET_ID);
  }

  /** Returns true if field reuseInterval is set (has been assigned a value) and false otherwise */
  public boolean isSetReuseInterval() {
    return __isset_bit_vector.get(__REUSEINTERVAL_ISSET_ID);
  }

  public void setReuseIntervalIsSet(boolean value) {
    __isset_bit_vector.set(__REUSEINTERVAL_ISSET_ID, value);
  }

  public boolean isSeed() {
    return this.seed;
  }

  public TURLInfo setSeed(boolean seed) {
    this.seed = seed;
    setSeedIsSet(true);
    return this;
  }

  public void unsetSeed() {
    __isset_bit_vector.clear(__SEED_ISSET_ID);
  }

  /** Returns true if field seed is set (has been assigned a value) and false otherwise */
  public boolean isSetSeed() {
    return __isset_bit_vector.get(__SEED_ISSET_ID);
  }

  public void setSeedIsSet(boolean value) {
    __isset_bit_vector.set(__SEED_ISSET_ID, value);
  }

  public byte[] getAttach() {
    setAttach(org.apache.thrift.TBaseHelper.rightSize(attach));
    return attach == null ? null : attach.array();
  }

  public ByteBuffer bufferForAttach() {
    return attach;
  }

  public TURLInfo setAttach(byte[] attach) {
    setAttach(attach == null ? (ByteBuffer)null : ByteBuffer.wrap(attach));
    return this;
  }

  public TURLInfo setAttach(ByteBuffer attach) {
    this.attach = attach;
    return this;
  }

  public void unsetAttach() {
    this.attach = null;
  }

  /** Returns true if field attach is set (has been assigned a value) and false otherwise */
  public boolean isSetAttach() {
    return this.attach != null;
  }

  public void setAttachIsSet(boolean value) {
    if (!value) {
      this.attach = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UURL:
      if (value == null) {
        unsetUurl();
      } else {
        setUurl((String)value);
      }
      break;

    case PATH_FROM_SEED:
      if (value == null) {
        unsetPathFromSeed();
      } else {
        setPathFromSeed((String)value);
      }
      break;

    case VIA:
      if (value == null) {
        unsetVia();
      } else {
        setVia((String)value);
      }
      break;

    case MODIFY_TIME:
      if (value == null) {
        unsetModifyTime();
      } else {
        setModifyTime((Long)value);
      }
      break;

    case DOWN_LOAD_TIME:
      if (value == null) {
        unsetDownLoadTime();
      } else {
        setDownLoadTime((Long)value);
      }
      break;

    case REUSE_INTERVAL:
      if (value == null) {
        unsetReuseInterval();
      } else {
        setReuseInterval((Long)value);
      }
      break;

    case SEED:
      if (value == null) {
        unsetSeed();
      } else {
        setSeed((Boolean)value);
      }
      break;

    case ATTACH:
      if (value == null) {
        unsetAttach();
      } else {
        setAttach((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UURL:
      return getUurl();

    case PATH_FROM_SEED:
      return getPathFromSeed();

    case VIA:
      return getVia();

    case MODIFY_TIME:
      return Long.valueOf(getModifyTime());

    case DOWN_LOAD_TIME:
      return Long.valueOf(getDownLoadTime());

    case REUSE_INTERVAL:
      return Long.valueOf(getReuseInterval());

    case SEED:
      return Boolean.valueOf(isSeed());

    case ATTACH:
      return getAttach();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UURL:
      return isSetUurl();
    case PATH_FROM_SEED:
      return isSetPathFromSeed();
    case VIA:
      return isSetVia();
    case MODIFY_TIME:
      return isSetModifyTime();
    case DOWN_LOAD_TIME:
      return isSetDownLoadTime();
    case REUSE_INTERVAL:
      return isSetReuseInterval();
    case SEED:
      return isSetSeed();
    case ATTACH:
      return isSetAttach();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TURLInfo)
      return this.equals((TURLInfo)that);
    return false;
  }

  public boolean equals(TURLInfo that) {
    if (that == null)
      return false;

    boolean this_present_uurl = true && this.isSetUurl();
    boolean that_present_uurl = true && that.isSetUurl();
    if (this_present_uurl || that_present_uurl) {
      if (!(this_present_uurl && that_present_uurl))
        return false;
      if (!this.uurl.equals(that.uurl))
        return false;
    }

    boolean this_present_pathFromSeed = true && this.isSetPathFromSeed();
    boolean that_present_pathFromSeed = true && that.isSetPathFromSeed();
    if (this_present_pathFromSeed || that_present_pathFromSeed) {
      if (!(this_present_pathFromSeed && that_present_pathFromSeed))
        return false;
      if (!this.pathFromSeed.equals(that.pathFromSeed))
        return false;
    }

    boolean this_present_via = true && this.isSetVia();
    boolean that_present_via = true && that.isSetVia();
    if (this_present_via || that_present_via) {
      if (!(this_present_via && that_present_via))
        return false;
      if (!this.via.equals(that.via))
        return false;
    }

    boolean this_present_modifyTime = true;
    boolean that_present_modifyTime = true;
    if (this_present_modifyTime || that_present_modifyTime) {
      if (!(this_present_modifyTime && that_present_modifyTime))
        return false;
      if (this.modifyTime != that.modifyTime)
        return false;
    }

    boolean this_present_downLoadTime = true;
    boolean that_present_downLoadTime = true;
    if (this_present_downLoadTime || that_present_downLoadTime) {
      if (!(this_present_downLoadTime && that_present_downLoadTime))
        return false;
      if (this.downLoadTime != that.downLoadTime)
        return false;
    }

    boolean this_present_reuseInterval = true;
    boolean that_present_reuseInterval = true;
    if (this_present_reuseInterval || that_present_reuseInterval) {
      if (!(this_present_reuseInterval && that_present_reuseInterval))
        return false;
      if (this.reuseInterval != that.reuseInterval)
        return false;
    }

    boolean this_present_seed = true;
    boolean that_present_seed = true;
    if (this_present_seed || that_present_seed) {
      if (!(this_present_seed && that_present_seed))
        return false;
      if (this.seed != that.seed)
        return false;
    }

    boolean this_present_attach = true && this.isSetAttach();
    boolean that_present_attach = true && that.isSetAttach();
    if (this_present_attach || that_present_attach) {
      if (!(this_present_attach && that_present_attach))
        return false;
      if (!this.attach.equals(that.attach))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TURLInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TURLInfo typedOther = (TURLInfo)other;

    lastComparison = Boolean.valueOf(isSetUurl()).compareTo(typedOther.isSetUurl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUurl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uurl, typedOther.uurl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPathFromSeed()).compareTo(typedOther.isSetPathFromSeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPathFromSeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pathFromSeed, typedOther.pathFromSeed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVia()).compareTo(typedOther.isSetVia());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVia()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.via, typedOther.via);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModifyTime()).compareTo(typedOther.isSetModifyTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModifyTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modifyTime, typedOther.modifyTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDownLoadTime()).compareTo(typedOther.isSetDownLoadTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDownLoadTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.downLoadTime, typedOther.downLoadTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReuseInterval()).compareTo(typedOther.isSetReuseInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReuseInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reuseInterval, typedOther.reuseInterval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeed()).compareTo(typedOther.isSetSeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seed, typedOther.seed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttach()).compareTo(typedOther.isSetAttach());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttach()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attach, typedOther.attach);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // UURL
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.uurl = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // PATH_FROM_SEED
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.pathFromSeed = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // VIA
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.via = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // MODIFY_TIME
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.modifyTime = iprot.readI64();
            setModifyTimeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // DOWN_LOAD_TIME
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.downLoadTime = iprot.readI64();
            setDownLoadTimeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // REUSE_INTERVAL
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.reuseInterval = iprot.readI64();
            setReuseIntervalIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // SEED
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.seed = iprot.readBool();
            setSeedIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // ATTACH
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.attach = iprot.readBinary();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.uurl != null) {
      oprot.writeFieldBegin(UURL_FIELD_DESC);
      oprot.writeString(this.uurl);
      oprot.writeFieldEnd();
    }
    if (this.pathFromSeed != null) {
      oprot.writeFieldBegin(PATH_FROM_SEED_FIELD_DESC);
      oprot.writeString(this.pathFromSeed);
      oprot.writeFieldEnd();
    }
    if (this.via != null) {
      oprot.writeFieldBegin(VIA_FIELD_DESC);
      oprot.writeString(this.via);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(MODIFY_TIME_FIELD_DESC);
    oprot.writeI64(this.modifyTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(DOWN_LOAD_TIME_FIELD_DESC);
    oprot.writeI64(this.downLoadTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(REUSE_INTERVAL_FIELD_DESC);
    oprot.writeI64(this.reuseInterval);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SEED_FIELD_DESC);
    oprot.writeBool(this.seed);
    oprot.writeFieldEnd();
    if (this.attach != null) {
      oprot.writeFieldBegin(ATTACH_FIELD_DESC);
      oprot.writeBinary(this.attach);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TURLInfo(");
    boolean first = true;

    sb.append("uurl:");
    if (this.uurl == null) {
      sb.append("null");
    } else {
      sb.append(this.uurl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pathFromSeed:");
    if (this.pathFromSeed == null) {
      sb.append("null");
    } else {
      sb.append(this.pathFromSeed);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("via:");
    if (this.via == null) {
      sb.append("null");
    } else {
      sb.append(this.via);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("modifyTime:");
    sb.append(this.modifyTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("downLoadTime:");
    sb.append(this.downLoadTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reuseInterval:");
    sb.append(this.reuseInterval);
    first = false;
    if (!first) sb.append(", ");
    sb.append("seed:");
    sb.append(this.seed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("attach:");
    if (this.attach == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.attach, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

