/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.netease.backend.collector.rss.common.net;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 节点信息
 */
public class TNodeInfo implements org.apache.thrift.TBase<TNodeInfo, TNodeInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TNodeInfo");

  private static final org.apache.thrift.protocol.TField NODE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField UPDATE_ARTICLE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateArticle", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField DUPLIC_FILTER_SERVERS_FIELD_DESC = new org.apache.thrift.protocol.TField("duplicFilterServers", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField CLIENT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("clientInfo", org.apache.thrift.protocol.TType.STRING, (short)4);

  public int nodeId; // required
  public boolean updateArticle; // required
  public List<String> duplicFilterServers; // required
  public String clientInfo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NODE_ID((short)1, "nodeId"),
    UPDATE_ARTICLE((short)2, "updateArticle"),
    DUPLIC_FILTER_SERVERS((short)3, "duplicFilterServers"),
    CLIENT_INFO((short)4, "clientInfo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NODE_ID
          return NODE_ID;
        case 2: // UPDATE_ARTICLE
          return UPDATE_ARTICLE;
        case 3: // DUPLIC_FILTER_SERVERS
          return DUPLIC_FILTER_SERVERS;
        case 4: // CLIENT_INFO
          return CLIENT_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NODEID_ISSET_ID = 0;
  private static final int __UPDATEARTICLE_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NODE_ID, new org.apache.thrift.meta_data.FieldMetaData("nodeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_ARTICLE, new org.apache.thrift.meta_data.FieldMetaData("updateArticle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DUPLIC_FILTER_SERVERS, new org.apache.thrift.meta_data.FieldMetaData("duplicFilterServers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CLIENT_INFO, new org.apache.thrift.meta_data.FieldMetaData("clientInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TNodeInfo.class, metaDataMap);
  }

  public TNodeInfo() {
    this.nodeId = 0;

  }

  public TNodeInfo(
    int nodeId,
    boolean updateArticle,
    List<String> duplicFilterServers,
    String clientInfo)
  {
    this();
    this.nodeId = nodeId;
    setNodeIdIsSet(true);
    this.updateArticle = updateArticle;
    setUpdateArticleIsSet(true);
    this.duplicFilterServers = duplicFilterServers;
    this.clientInfo = clientInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TNodeInfo(TNodeInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.nodeId = other.nodeId;
    this.updateArticle = other.updateArticle;
    if (other.isSetDuplicFilterServers()) {
      List<String> __this__duplicFilterServers = new ArrayList<String>();
      for (String other_element : other.duplicFilterServers) {
        __this__duplicFilterServers.add(other_element);
      }
      this.duplicFilterServers = __this__duplicFilterServers;
    }
    if (other.isSetClientInfo()) {
      this.clientInfo = other.clientInfo;
    }
  }

  public TNodeInfo deepCopy() {
    return new TNodeInfo(this);
  }

  @Override
  public void clear() {
    this.nodeId = 0;

    setUpdateArticleIsSet(false);
    this.updateArticle = false;
    this.duplicFilterServers = null;
    this.clientInfo = null;
  }

  public int getNodeId() {
    return this.nodeId;
  }

  public TNodeInfo setNodeId(int nodeId) {
    this.nodeId = nodeId;
    setNodeIdIsSet(true);
    return this;
  }

  public void unsetNodeId() {
    __isset_bit_vector.clear(__NODEID_ISSET_ID);
  }

  /** Returns true if field nodeId is set (has been assigned a value) and false otherwise */
  public boolean isSetNodeId() {
    return __isset_bit_vector.get(__NODEID_ISSET_ID);
  }

  public void setNodeIdIsSet(boolean value) {
    __isset_bit_vector.set(__NODEID_ISSET_ID, value);
  }

  public boolean isUpdateArticle() {
    return this.updateArticle;
  }

  public TNodeInfo setUpdateArticle(boolean updateArticle) {
    this.updateArticle = updateArticle;
    setUpdateArticleIsSet(true);
    return this;
  }

  public void unsetUpdateArticle() {
    __isset_bit_vector.clear(__UPDATEARTICLE_ISSET_ID);
  }

  /** Returns true if field updateArticle is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateArticle() {
    return __isset_bit_vector.get(__UPDATEARTICLE_ISSET_ID);
  }

  public void setUpdateArticleIsSet(boolean value) {
    __isset_bit_vector.set(__UPDATEARTICLE_ISSET_ID, value);
  }

  public int getDuplicFilterServersSize() {
    return (this.duplicFilterServers == null) ? 0 : this.duplicFilterServers.size();
  }

  public java.util.Iterator<String> getDuplicFilterServersIterator() {
    return (this.duplicFilterServers == null) ? null : this.duplicFilterServers.iterator();
  }

  public void addToDuplicFilterServers(String elem) {
    if (this.duplicFilterServers == null) {
      this.duplicFilterServers = new ArrayList<String>();
    }
    this.duplicFilterServers.add(elem);
  }

  public List<String> getDuplicFilterServers() {
    return this.duplicFilterServers;
  }

  public TNodeInfo setDuplicFilterServers(List<String> duplicFilterServers) {
    this.duplicFilterServers = duplicFilterServers;
    return this;
  }

  public void unsetDuplicFilterServers() {
    this.duplicFilterServers = null;
  }

  /** Returns true if field duplicFilterServers is set (has been assigned a value) and false otherwise */
  public boolean isSetDuplicFilterServers() {
    return this.duplicFilterServers != null;
  }

  public void setDuplicFilterServersIsSet(boolean value) {
    if (!value) {
      this.duplicFilterServers = null;
    }
  }

  public String getClientInfo() {
    return this.clientInfo;
  }

  public TNodeInfo setClientInfo(String clientInfo) {
    this.clientInfo = clientInfo;
    return this;
  }

  public void unsetClientInfo() {
    this.clientInfo = null;
  }

  /** Returns true if field clientInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetClientInfo() {
    return this.clientInfo != null;
  }

  public void setClientInfoIsSet(boolean value) {
    if (!value) {
      this.clientInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NODE_ID:
      if (value == null) {
        unsetNodeId();
      } else {
        setNodeId((Integer)value);
      }
      break;

    case UPDATE_ARTICLE:
      if (value == null) {
        unsetUpdateArticle();
      } else {
        setUpdateArticle((Boolean)value);
      }
      break;

    case DUPLIC_FILTER_SERVERS:
      if (value == null) {
        unsetDuplicFilterServers();
      } else {
        setDuplicFilterServers((List<String>)value);
      }
      break;

    case CLIENT_INFO:
      if (value == null) {
        unsetClientInfo();
      } else {
        setClientInfo((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NODE_ID:
      return Integer.valueOf(getNodeId());

    case UPDATE_ARTICLE:
      return Boolean.valueOf(isUpdateArticle());

    case DUPLIC_FILTER_SERVERS:
      return getDuplicFilterServers();

    case CLIENT_INFO:
      return getClientInfo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NODE_ID:
      return isSetNodeId();
    case UPDATE_ARTICLE:
      return isSetUpdateArticle();
    case DUPLIC_FILTER_SERVERS:
      return isSetDuplicFilterServers();
    case CLIENT_INFO:
      return isSetClientInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TNodeInfo)
      return this.equals((TNodeInfo)that);
    return false;
  }

  public boolean equals(TNodeInfo that) {
    if (that == null)
      return false;

    boolean this_present_nodeId = true;
    boolean that_present_nodeId = true;
    if (this_present_nodeId || that_present_nodeId) {
      if (!(this_present_nodeId && that_present_nodeId))
        return false;
      if (this.nodeId != that.nodeId)
        return false;
    }

    boolean this_present_updateArticle = true;
    boolean that_present_updateArticle = true;
    if (this_present_updateArticle || that_present_updateArticle) {
      if (!(this_present_updateArticle && that_present_updateArticle))
        return false;
      if (this.updateArticle != that.updateArticle)
        return false;
    }

    boolean this_present_duplicFilterServers = true && this.isSetDuplicFilterServers();
    boolean that_present_duplicFilterServers = true && that.isSetDuplicFilterServers();
    if (this_present_duplicFilterServers || that_present_duplicFilterServers) {
      if (!(this_present_duplicFilterServers && that_present_duplicFilterServers))
        return false;
      if (!this.duplicFilterServers.equals(that.duplicFilterServers))
        return false;
    }

    boolean this_present_clientInfo = true && this.isSetClientInfo();
    boolean that_present_clientInfo = true && that.isSetClientInfo();
    if (this_present_clientInfo || that_present_clientInfo) {
      if (!(this_present_clientInfo && that_present_clientInfo))
        return false;
      if (!this.clientInfo.equals(that.clientInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TNodeInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TNodeInfo typedOther = (TNodeInfo)other;

    lastComparison = Boolean.valueOf(isSetNodeId()).compareTo(typedOther.isSetNodeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeId, typedOther.nodeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateArticle()).compareTo(typedOther.isSetUpdateArticle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateArticle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateArticle, typedOther.updateArticle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDuplicFilterServers()).compareTo(typedOther.isSetDuplicFilterServers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDuplicFilterServers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.duplicFilterServers, typedOther.duplicFilterServers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientInfo()).compareTo(typedOther.isSetClientInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientInfo, typedOther.clientInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // NODE_ID
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.nodeId = iprot.readI32();
            setNodeIdIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // UPDATE_ARTICLE
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.updateArticle = iprot.readBool();
            setUpdateArticleIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // DUPLIC_FILTER_SERVERS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
              this.duplicFilterServers = new ArrayList<String>(_list12.size);
              for (int _i13 = 0; _i13 < _list12.size; ++_i13)
              {
                String _elem14; // required
                _elem14 = iprot.readString();
                this.duplicFilterServers.add(_elem14);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // CLIENT_INFO
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.clientInfo = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(NODE_ID_FIELD_DESC);
    oprot.writeI32(this.nodeId);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(UPDATE_ARTICLE_FIELD_DESC);
    oprot.writeBool(this.updateArticle);
    oprot.writeFieldEnd();
    if (this.duplicFilterServers != null) {
      oprot.writeFieldBegin(DUPLIC_FILTER_SERVERS_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.duplicFilterServers.size()));
        for (String _iter15 : this.duplicFilterServers)
        {
          oprot.writeString(_iter15);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.clientInfo != null) {
      oprot.writeFieldBegin(CLIENT_INFO_FIELD_DESC);
      oprot.writeString(this.clientInfo);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TNodeInfo(");
    boolean first = true;

    sb.append("nodeId:");
    sb.append(this.nodeId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateArticle:");
    sb.append(this.updateArticle);
    first = false;
    if (!first) sb.append(", ");
    sb.append("duplicFilterServers:");
    if (this.duplicFilterServers == null) {
      sb.append("null");
    } else {
      sb.append(this.duplicFilterServers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientInfo:");
    if (this.clientInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.clientInfo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

