/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.netease.backend.collector.rss.common.net;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TArticle implements org.apache.thrift.TBase<TArticle, TArticle._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TArticle");

  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("summary", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PUBLISH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("publishTime", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField ORIGINAL_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("originalUrl", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ARTICLE_FROM_FIELD_DESC = new org.apache.thrift.protocol.TField("articleFrom", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ARTICLE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("articleType", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField TOP_DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("topDay", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField IMAGE_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("imageItems", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField ARTICLE_UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("articleUuid", org.apache.thrift.protocol.TType.STRING, (short)11);

  public String title; // required
  public String content; // required
  public String summary; // required
  public long publishTime; // required
  public String originalUrl; // required
  public String articleFrom; // required
  public int articleType; // required
  public int topDay; // required
  public List<TImageItem> imageItems; // required
  public String articleUuid; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TITLE((short)1, "title"),
    CONTENT((short)2, "content"),
    SUMMARY((short)3, "summary"),
    PUBLISH_TIME((short)4, "publishTime"),
    ORIGINAL_URL((short)6, "originalUrl"),
    ARTICLE_FROM((short)7, "articleFrom"),
    ARTICLE_TYPE((short)8, "articleType"),
    TOP_DAY((short)9, "topDay"),
    IMAGE_ITEMS((short)10, "imageItems"),
    ARTICLE_UUID((short)11, "articleUuid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TITLE
          return TITLE;
        case 2: // CONTENT
          return CONTENT;
        case 3: // SUMMARY
          return SUMMARY;
        case 4: // PUBLISH_TIME
          return PUBLISH_TIME;
        case 6: // ORIGINAL_URL
          return ORIGINAL_URL;
        case 7: // ARTICLE_FROM
          return ARTICLE_FROM;
        case 8: // ARTICLE_TYPE
          return ARTICLE_TYPE;
        case 9: // TOP_DAY
          return TOP_DAY;
        case 10: // IMAGE_ITEMS
          return IMAGE_ITEMS;
        case 11: // ARTICLE_UUID
          return ARTICLE_UUID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PUBLISHTIME_ISSET_ID = 0;
  private static final int __ARTICLETYPE_ISSET_ID = 1;
  private static final int __TOPDAY_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("summary", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUBLISH_TIME, new org.apache.thrift.meta_data.FieldMetaData("publishTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ORIGINAL_URL, new org.apache.thrift.meta_data.FieldMetaData("originalUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARTICLE_FROM, new org.apache.thrift.meta_data.FieldMetaData("articleFrom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARTICLE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("articleType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOP_DAY, new org.apache.thrift.meta_data.FieldMetaData("topDay", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IMAGE_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("imageItems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TImageItem.class))));
    tmpMap.put(_Fields.ARTICLE_UUID, new org.apache.thrift.meta_data.FieldMetaData("articleUuid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TArticle.class, metaDataMap);
  }

  public TArticle() {
    this.articleUuid = "";

  }

  public TArticle(
    String title,
    String content,
    String summary,
    long publishTime,
    String originalUrl,
    String articleFrom,
    int articleType,
    int topDay,
    List<TImageItem> imageItems,
    String articleUuid)
  {
    this();
    this.title = title;
    this.content = content;
    this.summary = summary;
    this.publishTime = publishTime;
    setPublishTimeIsSet(true);
    this.originalUrl = originalUrl;
    this.articleFrom = articleFrom;
    this.articleType = articleType;
    setArticleTypeIsSet(true);
    this.topDay = topDay;
    setTopDayIsSet(true);
    this.imageItems = imageItems;
    this.articleUuid = articleUuid;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TArticle(TArticle other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetSummary()) {
      this.summary = other.summary;
    }
    this.publishTime = other.publishTime;
    if (other.isSetOriginalUrl()) {
      this.originalUrl = other.originalUrl;
    }
    if (other.isSetArticleFrom()) {
      this.articleFrom = other.articleFrom;
    }
    this.articleType = other.articleType;
    this.topDay = other.topDay;
    if (other.isSetImageItems()) {
      List<TImageItem> __this__imageItems = new ArrayList<TImageItem>();
      for (TImageItem other_element : other.imageItems) {
        __this__imageItems.add(new TImageItem(other_element));
      }
      this.imageItems = __this__imageItems;
    }
    if (other.isSetArticleUuid()) {
      this.articleUuid = other.articleUuid;
    }
  }

  public TArticle deepCopy() {
    return new TArticle(this);
  }

  @Override
  public void clear() {
    this.title = null;
    this.content = null;
    this.summary = null;
    setPublishTimeIsSet(false);
    this.publishTime = 0;
    this.originalUrl = null;
    this.articleFrom = null;
    setArticleTypeIsSet(false);
    this.articleType = 0;
    setTopDayIsSet(false);
    this.topDay = 0;
    this.imageItems = null;
    this.articleUuid = "";

  }

  public String getTitle() {
    return this.title;
  }

  public TArticle setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public TArticle setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getSummary() {
    return this.summary;
  }

  public TArticle setSummary(String summary) {
    this.summary = summary;
    return this;
  }

  public void unsetSummary() {
    this.summary = null;
  }

  /** Returns true if field summary is set (has been assigned a value) and false otherwise */
  public boolean isSetSummary() {
    return this.summary != null;
  }

  public void setSummaryIsSet(boolean value) {
    if (!value) {
      this.summary = null;
    }
  }

  public long getPublishTime() {
    return this.publishTime;
  }

  public TArticle setPublishTime(long publishTime) {
    this.publishTime = publishTime;
    setPublishTimeIsSet(true);
    return this;
  }

  public void unsetPublishTime() {
    __isset_bit_vector.clear(__PUBLISHTIME_ISSET_ID);
  }

  /** Returns true if field publishTime is set (has been assigned a value) and false otherwise */
  public boolean isSetPublishTime() {
    return __isset_bit_vector.get(__PUBLISHTIME_ISSET_ID);
  }

  public void setPublishTimeIsSet(boolean value) {
    __isset_bit_vector.set(__PUBLISHTIME_ISSET_ID, value);
  }

  public String getOriginalUrl() {
    return this.originalUrl;
  }

  public TArticle setOriginalUrl(String originalUrl) {
    this.originalUrl = originalUrl;
    return this;
  }

  public void unsetOriginalUrl() {
    this.originalUrl = null;
  }

  /** Returns true if field originalUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginalUrl() {
    return this.originalUrl != null;
  }

  public void setOriginalUrlIsSet(boolean value) {
    if (!value) {
      this.originalUrl = null;
    }
  }

  public String getArticleFrom() {
    return this.articleFrom;
  }

  public TArticle setArticleFrom(String articleFrom) {
    this.articleFrom = articleFrom;
    return this;
  }

  public void unsetArticleFrom() {
    this.articleFrom = null;
  }

  /** Returns true if field articleFrom is set (has been assigned a value) and false otherwise */
  public boolean isSetArticleFrom() {
    return this.articleFrom != null;
  }

  public void setArticleFromIsSet(boolean value) {
    if (!value) {
      this.articleFrom = null;
    }
  }

  public int getArticleType() {
    return this.articleType;
  }

  public TArticle setArticleType(int articleType) {
    this.articleType = articleType;
    setArticleTypeIsSet(true);
    return this;
  }

  public void unsetArticleType() {
    __isset_bit_vector.clear(__ARTICLETYPE_ISSET_ID);
  }

  /** Returns true if field articleType is set (has been assigned a value) and false otherwise */
  public boolean isSetArticleType() {
    return __isset_bit_vector.get(__ARTICLETYPE_ISSET_ID);
  }

  public void setArticleTypeIsSet(boolean value) {
    __isset_bit_vector.set(__ARTICLETYPE_ISSET_ID, value);
  }

  public int getTopDay() {
    return this.topDay;
  }

  public TArticle setTopDay(int topDay) {
    this.topDay = topDay;
    setTopDayIsSet(true);
    return this;
  }

  public void unsetTopDay() {
    __isset_bit_vector.clear(__TOPDAY_ISSET_ID);
  }

  /** Returns true if field topDay is set (has been assigned a value) and false otherwise */
  public boolean isSetTopDay() {
    return __isset_bit_vector.get(__TOPDAY_ISSET_ID);
  }

  public void setTopDayIsSet(boolean value) {
    __isset_bit_vector.set(__TOPDAY_ISSET_ID, value);
  }

  public int getImageItemsSize() {
    return (this.imageItems == null) ? 0 : this.imageItems.size();
  }

  public java.util.Iterator<TImageItem> getImageItemsIterator() {
    return (this.imageItems == null) ? null : this.imageItems.iterator();
  }

  public void addToImageItems(TImageItem elem) {
    if (this.imageItems == null) {
      this.imageItems = new ArrayList<TImageItem>();
    }
    this.imageItems.add(elem);
  }

  public List<TImageItem> getImageItems() {
    return this.imageItems;
  }

  public TArticle setImageItems(List<TImageItem> imageItems) {
    this.imageItems = imageItems;
    return this;
  }

  public void unsetImageItems() {
    this.imageItems = null;
  }

  /** Returns true if field imageItems is set (has been assigned a value) and false otherwise */
  public boolean isSetImageItems() {
    return this.imageItems != null;
  }

  public void setImageItemsIsSet(boolean value) {
    if (!value) {
      this.imageItems = null;
    }
  }

  public String getArticleUuid() {
    return this.articleUuid;
  }

  public TArticle setArticleUuid(String articleUuid) {
    this.articleUuid = articleUuid;
    return this;
  }

  public void unsetArticleUuid() {
    this.articleUuid = null;
  }

  /** Returns true if field articleUuid is set (has been assigned a value) and false otherwise */
  public boolean isSetArticleUuid() {
    return this.articleUuid != null;
  }

  public void setArticleUuidIsSet(boolean value) {
    if (!value) {
      this.articleUuid = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case SUMMARY:
      if (value == null) {
        unsetSummary();
      } else {
        setSummary((String)value);
      }
      break;

    case PUBLISH_TIME:
      if (value == null) {
        unsetPublishTime();
      } else {
        setPublishTime((Long)value);
      }
      break;

    case ORIGINAL_URL:
      if (value == null) {
        unsetOriginalUrl();
      } else {
        setOriginalUrl((String)value);
      }
      break;

    case ARTICLE_FROM:
      if (value == null) {
        unsetArticleFrom();
      } else {
        setArticleFrom((String)value);
      }
      break;

    case ARTICLE_TYPE:
      if (value == null) {
        unsetArticleType();
      } else {
        setArticleType((Integer)value);
      }
      break;

    case TOP_DAY:
      if (value == null) {
        unsetTopDay();
      } else {
        setTopDay((Integer)value);
      }
      break;

    case IMAGE_ITEMS:
      if (value == null) {
        unsetImageItems();
      } else {
        setImageItems((List<TImageItem>)value);
      }
      break;

    case ARTICLE_UUID:
      if (value == null) {
        unsetArticleUuid();
      } else {
        setArticleUuid((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TITLE:
      return getTitle();

    case CONTENT:
      return getContent();

    case SUMMARY:
      return getSummary();

    case PUBLISH_TIME:
      return Long.valueOf(getPublishTime());

    case ORIGINAL_URL:
      return getOriginalUrl();

    case ARTICLE_FROM:
      return getArticleFrom();

    case ARTICLE_TYPE:
      return Integer.valueOf(getArticleType());

    case TOP_DAY:
      return Integer.valueOf(getTopDay());

    case IMAGE_ITEMS:
      return getImageItems();

    case ARTICLE_UUID:
      return getArticleUuid();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TITLE:
      return isSetTitle();
    case CONTENT:
      return isSetContent();
    case SUMMARY:
      return isSetSummary();
    case PUBLISH_TIME:
      return isSetPublishTime();
    case ORIGINAL_URL:
      return isSetOriginalUrl();
    case ARTICLE_FROM:
      return isSetArticleFrom();
    case ARTICLE_TYPE:
      return isSetArticleType();
    case TOP_DAY:
      return isSetTopDay();
    case IMAGE_ITEMS:
      return isSetImageItems();
    case ARTICLE_UUID:
      return isSetArticleUuid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TArticle)
      return this.equals((TArticle)that);
    return false;
  }

  public boolean equals(TArticle that) {
    if (that == null)
      return false;

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_summary = true && this.isSetSummary();
    boolean that_present_summary = true && that.isSetSummary();
    if (this_present_summary || that_present_summary) {
      if (!(this_present_summary && that_present_summary))
        return false;
      if (!this.summary.equals(that.summary))
        return false;
    }

    boolean this_present_publishTime = true;
    boolean that_present_publishTime = true;
    if (this_present_publishTime || that_present_publishTime) {
      if (!(this_present_publishTime && that_present_publishTime))
        return false;
      if (this.publishTime != that.publishTime)
        return false;
    }

    boolean this_present_originalUrl = true && this.isSetOriginalUrl();
    boolean that_present_originalUrl = true && that.isSetOriginalUrl();
    if (this_present_originalUrl || that_present_originalUrl) {
      if (!(this_present_originalUrl && that_present_originalUrl))
        return false;
      if (!this.originalUrl.equals(that.originalUrl))
        return false;
    }

    boolean this_present_articleFrom = true && this.isSetArticleFrom();
    boolean that_present_articleFrom = true && that.isSetArticleFrom();
    if (this_present_articleFrom || that_present_articleFrom) {
      if (!(this_present_articleFrom && that_present_articleFrom))
        return false;
      if (!this.articleFrom.equals(that.articleFrom))
        return false;
    }

    boolean this_present_articleType = true;
    boolean that_present_articleType = true;
    if (this_present_articleType || that_present_articleType) {
      if (!(this_present_articleType && that_present_articleType))
        return false;
      if (this.articleType != that.articleType)
        return false;
    }

    boolean this_present_topDay = true;
    boolean that_present_topDay = true;
    if (this_present_topDay || that_present_topDay) {
      if (!(this_present_topDay && that_present_topDay))
        return false;
      if (this.topDay != that.topDay)
        return false;
    }

    boolean this_present_imageItems = true && this.isSetImageItems();
    boolean that_present_imageItems = true && that.isSetImageItems();
    if (this_present_imageItems || that_present_imageItems) {
      if (!(this_present_imageItems && that_present_imageItems))
        return false;
      if (!this.imageItems.equals(that.imageItems))
        return false;
    }

    boolean this_present_articleUuid = true && this.isSetArticleUuid();
    boolean that_present_articleUuid = true && that.isSetArticleUuid();
    if (this_present_articleUuid || that_present_articleUuid) {
      if (!(this_present_articleUuid && that_present_articleUuid))
        return false;
      if (!this.articleUuid.equals(that.articleUuid))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TArticle other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TArticle typedOther = (TArticle)other;

    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSummary()).compareTo(typedOther.isSetSummary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSummary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.summary, typedOther.summary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublishTime()).compareTo(typedOther.isSetPublishTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublishTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publishTime, typedOther.publishTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOriginalUrl()).compareTo(typedOther.isSetOriginalUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginalUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originalUrl, typedOther.originalUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArticleFrom()).compareTo(typedOther.isSetArticleFrom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArticleFrom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.articleFrom, typedOther.articleFrom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArticleType()).compareTo(typedOther.isSetArticleType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArticleType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.articleType, typedOther.articleType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopDay()).compareTo(typedOther.isSetTopDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topDay, typedOther.topDay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageItems()).compareTo(typedOther.isSetImageItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageItems, typedOther.imageItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArticleUuid()).compareTo(typedOther.isSetArticleUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArticleUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.articleUuid, typedOther.articleUuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // TITLE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.title = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // CONTENT
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.content = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // SUMMARY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.summary = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // PUBLISH_TIME
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.publishTime = iprot.readI64();
            setPublishTimeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // ORIGINAL_URL
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.originalUrl = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // ARTICLE_FROM
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.articleFrom = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // ARTICLE_TYPE
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.articleType = iprot.readI32();
            setArticleTypeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // TOP_DAY
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.topDay = iprot.readI32();
            setTopDayIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // IMAGE_ITEMS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
              this.imageItems = new ArrayList<TImageItem>(_list8.size);
              for (int _i9 = 0; _i9 < _list8.size; ++_i9)
              {
                TImageItem _elem10; // required
                _elem10 = new TImageItem();
                _elem10.read(iprot);
                this.imageItems.add(_elem10);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // ARTICLE_UUID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.articleUuid = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.title != null) {
      oprot.writeFieldBegin(TITLE_FIELD_DESC);
      oprot.writeString(this.title);
      oprot.writeFieldEnd();
    }
    if (this.content != null) {
      oprot.writeFieldBegin(CONTENT_FIELD_DESC);
      oprot.writeString(this.content);
      oprot.writeFieldEnd();
    }
    if (this.summary != null) {
      oprot.writeFieldBegin(SUMMARY_FIELD_DESC);
      oprot.writeString(this.summary);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(PUBLISH_TIME_FIELD_DESC);
    oprot.writeI64(this.publishTime);
    oprot.writeFieldEnd();
    if (this.originalUrl != null) {
      oprot.writeFieldBegin(ORIGINAL_URL_FIELD_DESC);
      oprot.writeString(this.originalUrl);
      oprot.writeFieldEnd();
    }
    if (this.articleFrom != null) {
      oprot.writeFieldBegin(ARTICLE_FROM_FIELD_DESC);
      oprot.writeString(this.articleFrom);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(ARTICLE_TYPE_FIELD_DESC);
    oprot.writeI32(this.articleType);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TOP_DAY_FIELD_DESC);
    oprot.writeI32(this.topDay);
    oprot.writeFieldEnd();
    if (this.imageItems != null) {
      oprot.writeFieldBegin(IMAGE_ITEMS_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.imageItems.size()));
        for (TImageItem _iter11 : this.imageItems)
        {
          _iter11.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.articleUuid != null) {
      oprot.writeFieldBegin(ARTICLE_UUID_FIELD_DESC);
      oprot.writeString(this.articleUuid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TArticle(");
    boolean first = true;

    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("summary:");
    if (this.summary == null) {
      sb.append("null");
    } else {
      sb.append(this.summary);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("publishTime:");
    sb.append(this.publishTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("originalUrl:");
    if (this.originalUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.originalUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("articleFrom:");
    if (this.articleFrom == null) {
      sb.append("null");
    } else {
      sb.append(this.articleFrom);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("articleType:");
    sb.append(this.articleType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("topDay:");
    sb.append(this.topDay);
    first = false;
    if (!first) sb.append(", ");
    sb.append("imageItems:");
    if (this.imageItems == null) {
      sb.append("null");
    } else {
      sb.append(this.imageItems);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("articleUuid:");
    if (this.articleUuid == null) {
      sb.append("null");
    } else {
      sb.append(this.articleUuid);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

